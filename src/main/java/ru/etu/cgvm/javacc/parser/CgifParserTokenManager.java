/* CgifParserTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. CgifParserTokenManager.java */
package ru.etu.cgvm.javacc.parser;

import ru.etu.cgvm.objects.Arc;
import ru.etu.cgvm.objects.Referent;
import ru.etu.cgvm.objects.SignatureParameter;
import ru.etu.cgvm.objects.Type;
import ru.etu.cgvm.objects.base.Node;
import ru.etu.cgvm.objects.nodes.Actor;
import ru.etu.cgvm.objects.nodes.Concept;
import ru.etu.cgvm.objects.nodes.Graph;
import ru.etu.cgvm.objects.nodes.Relation;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.nio.charset.StandardCharsets;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class CgifParserTokenManager implements CgifParserConstants {
    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x200000L) != 0x0L)
                    return 24;
                if ((active0 & 0x4000000L) != 0x0L)
                    return 83;
                if ((active0 & 0x10000L) != 0x0L)
                    return 66;
                if ((active0 & 0x8000L) != 0x0L)
                    return 63;
                if ((active0 & 0x400000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    return 84;
                }
                if ((active0 & 0x1bc0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    return 61;
                }
                if ((active0 & 0x400000L) != 0x0L)
                    return 47;
                if ((active0 & 0x100L) != 0x0L)
                    return 33;
                if ((active0 & 0x80000L) != 0x0L)
                    return 27;
                if ((active0 & 0x8000000L) != 0x0L)
                    return 85;
                return -1;
            case 1:
                if ((active0 & 0x1fc0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 1;
                    return 61;
                }
                return -1;
            case 2:
                if ((active0 & 0x800000000L) != 0x0L)
                    return 61;
                if ((active0 & 0x17c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 2;
                    return 61;
                }
                return -1;
            case 3:
                if ((active0 & 0x17c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 3;
                    return 61;
                }
                return -1;
            case 4:
                if ((active0 & 0x17c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 4;
                    return 61;
                }
                return -1;
            case 5:
                if ((active0 & 0x1000000000L) != 0x0L)
                    return 61;
                if ((active0 & 0x7c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 5;
                    return 61;
                }
                return -1;
            case 6:
                if ((active0 & 0x7c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 6;
                    return 61;
                }
                return -1;
            case 7:
                if ((active0 & 0x7c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 7;
                    return 61;
                }
                return -1;
            case 8:
                if ((active0 & 0x100000000L) != 0x0L)
                    return 61;
                if ((active0 & 0x6c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 8;
                    return 61;
                }
                return -1;
            case 9:
                if ((active0 & 0x6c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 9;
                    return 61;
                }
                return -1;
            case 10:
                if ((active0 & 0x6c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 10;
                    return 61;
                }
                return -1;
            case 11:
                if ((active0 & 0x6c0000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 11;
                    return 61;
                }
                return -1;
            case 12:
                if ((active0 & 0x240000000L) != 0x0L)
                    return 61;
                if ((active0 & 0x480000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 12;
                    return 61;
                }
                return -1;
            case 13:
                if ((active0 & 0x480000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 13;
                    return 61;
                }
                return -1;
            case 14:
                if ((active0 & 0x480000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 14;
                    return 61;
                }
                return -1;
            case 15:
                if ((active0 & 0x400000000L) != 0x0L)
                    return 61;
                if ((active0 & 0x80000000L) != 0x0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 15;
                    return 61;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case '"':
                return jjStartNfaWithStates_0(0, 26, 83);
            case '#':
                return jjStopAtPos(0, 20);
            case '%':
                return jjStartNfaWithStates_0(0, 21, 24);
            case '&':
                return jjStopAtPos(0, 18);
            case '\'':
                return jjStartNfaWithStates_0(0, 27, 85);
            case '(':
                return jjStopAtPos(0, 10);
            case ')':
                return jjStopAtPos(0, 11);
            case '*':
                return jjStartNfaWithStates_0(0, 16, 66);
            case ',':
                return jjStopAtPos(0, 17);
            case '/':
                return jjMoveStringLiteralDfa1_0(0x20L);
            case ':':
                return jjStopAtPos(0, 14);
            case '<':
                return jjStartNfaWithStates_0(0, 22, 47);
            case '=':
                return jjStopAtPos(0, 24);
            case '>':
                return jjStopAtPos(0, 23);
            case '?':
                return jjStartNfaWithStates_0(0, 15, 63);
            case '@':
                return jjStartNfaWithStates_0(0, 19, 27);
            case 'D':
                return jjMoveStringLiteralDfa1_0(0x800000000L);
            case 'L':
                return jjMoveStringLiteralDfa1_0(0x400000000L);
            case 'R':
                return jjMoveStringLiteralDfa1_0(0x280000000L);
            case 'T':
                return jjMoveStringLiteralDfa1_0(0x140000000L);
            case '[':
                return jjStopAtPos(0, 12);
            case ']':
                return jjStopAtPos(0, 13);
            case '_':
                return jjStopAtPos(0, 28);
            case 'l':
                return jjMoveStringLiteralDfa1_0(0x1000000000L);
            case '{':
                return jjStartNfaWithStates_0(0, 8, 33);
            case '|':
                return jjStopAtPos(0, 25);
            case '}':
                return jjStopAtPos(0, 9);
            case '~':
                return jjStopAtPos(0, 29);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case '*':
                if ((active0 & 0x20L) != 0x0L)
                    return jjStopAtPos(1, 5);
                break;
            case 'a':
                return jjMoveStringLiteralDfa2_0(active0, 0x1400000000L);
            case 'e':
                return jjMoveStringLiteralDfa2_0(active0, 0xa80000000L);
            case 'y':
                return jjMoveStringLiteralDfa2_0(active0, 0x140000000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 'f':
                if ((active0 & 0x800000000L) != 0x0L)
                    return jjStartNfaWithStates_0(2, 35, 61);
                break;
            case 'l':
                return jjMoveStringLiteralDfa3_0(active0, 0x280000000L);
            case 'm':
                return jjMoveStringLiteralDfa3_0(active0, 0x1400000000L);
            case 'p':
                return jjMoveStringLiteralDfa3_0(active0, 0x140000000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 'a':
                return jjMoveStringLiteralDfa4_0(active0, 0x280000000L);
            case 'b':
                return jjMoveStringLiteralDfa4_0(active0, 0x1400000000L);
            case 'e':
                return jjMoveStringLiteralDfa4_0(active0, 0x140000000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 'H':
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
            case 'L':
                return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
            case 'd':
                return jjMoveStringLiteralDfa5_0(active0, 0x1400000000L);
            case 't':
                return jjMoveStringLiteralDfa5_0(active0, 0x280000000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 'a':
                if ((active0 & 0x1000000000L) != 0x0L)
                    return jjStartNfaWithStates_0(5, 36, 61);
                return jjMoveStringLiteralDfa6_0(active0, 0x500000000L);
            case 'i':
                return jjMoveStringLiteralDfa6_0(active0, 0x2c0000000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 'E':
                return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
            case 'b':
                return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
            case 'e':
                return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
            case 'o':
                return jjMoveStringLiteralDfa7_0(active0, 0x280000000L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 'e':
                return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
            case 'n':
                return jjMoveStringLiteralDfa8_0(active0, 0x280000000L);
            case 'r':
                return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
            case 'x':
                return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 'H':
                return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
            case 'L':
                return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
            case 'a':
                return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
            case 'l':
                if ((active0 & 0x100000000L) != 0x0L)
                    return jjStartNfaWithStates_0(8, 32, 61);
                break;
            case 'p':
                return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(7, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar) {
            case 'a':
                return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
            case 'i':
                return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
            case 'r':
                return jjMoveStringLiteralDfa10_0(active0, 0x440000000L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(8, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0);
            return 10;
        }
        switch (curChar) {
            case 'b':
                return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
            case 'c':
                return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
            case 'e':
                return jjMoveStringLiteralDfa11_0(active0, 0x480000000L);
            default:
                break;
        }
        return jjStartNfa_0(9, active0);
    }

    private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(9, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0);
            return 11;
        }
        switch (curChar) {
            case 'e':
                return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
            case 'h':
                return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
            case 'r':
                return jjMoveStringLiteralDfa12_0(active0, 0x80000000L);
            case 's':
                return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(10, active0);
    }

    private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(10, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0);
            return 12;
        }
        switch (curChar) {
            case 'a':
                return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
            case 'l':
                if ((active0 & 0x200000000L) != 0x0L)
                    return jjStartNfaWithStates_0(12, 33, 61);
                break;
            case 's':
                return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
            case 'y':
                if ((active0 & 0x40000000L) != 0x0L)
                    return jjStartNfaWithStates_0(12, 30, 61);
                break;
            default:
                break;
        }
        return jjStartNfa_0(11, active0);
    }

    private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(11, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0);
            return 13;
        }
        switch (curChar) {
            case 'i':
                return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
            case 'r':
                return jjMoveStringLiteralDfa14_0(active0, 0x80000000L);
            default:
                break;
        }
        return jjStartNfa_0(12, active0);
    }

    private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(12, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0);
            return 14;
        }
        switch (curChar) {
            case 'c':
                return jjMoveStringLiteralDfa15_0(active0, 0x80000000L);
            case 'o':
                return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(13, active0);
    }

    private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(13, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0);
            return 15;
        }
        switch (curChar) {
            case 'h':
                return jjMoveStringLiteralDfa16_0(active0, 0x80000000L);
            case 'n':
                if ((active0 & 0x400000000L) != 0x0L)
                    return jjStartNfaWithStates_0(15, 34, 61);
                break;
            default:
                break;
        }
        return jjStartNfa_0(14, active0);
    }

    private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(14, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(15, active0);
            return 16;
        }
        switch (curChar) {
            case 'y':
                if ((active0 & 0x80000000L) != 0x0L)
                    return jjStartNfaWithStates_0(16, 31, 61);
                break;
            default:
                break;
        }
        return jjStartNfa_0(15, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 83;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 33:
                            if (curChar == 42) {
                                jjCheckNAdd(40);
                            } else if (curChar == 63)
                                jjstateSet[jjnewStateCnt++] = 34;
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(0, 6);
                            } else if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 66;
                            else if (curChar == 60) {
                                jjAddStates(7, 9);
                            } else if (curChar == 37)
                                jjstateSet[jjnewStateCnt++] = 24;
                            else if (curChar == 39) {
                                jjCheckNAddStates(10, 12);
                            } else if (curChar == 34) {
                                jjCheckNAddStates(13, 15);
                            } else if (curChar == 46) {
                                jjCheckNAdd(8);
                            } else if (curChar == 63)
                                jjstateSet[jjnewStateCnt++] = 63;
                            if ((0x3fe000000000000L & l) != 0x0L) {
                                if (kind > 38)
                                    kind = 38;
                                {
                                    jjCheckNAdd(6);
                                }
                            }
                            break;
                        case 27:
                            if ((0x3fe000000000000L & l) != 0x0L) {
                                if (kind > 44)
                                    kind = 44;
                                {
                                    jjCheckNAdd(29);
                                }
                            } else if ((0x7000000000000000L & l) != 0x0L)
                                jjstateSet[jjnewStateCnt++] = 28;
                            break;
                        case 85:
                            if ((0xffffff7bffffffffL & l) != 0x0L) {
                                jjCheckNAddStates(10, 12);
                            } else if (curChar == 39) {
                                if (kind > 42)
                                    kind = 42;
                            }
                            break;
                        case 83:
                            if ((0xfffffffbffffffffL & l) != 0x0L) {
                                jjCheckNAddStates(13, 15);
                            } else if (curChar == 34) {
                                if (kind > 41)
                                    kind = 41;
                            }
                            break;
                        case 47:
                            if (curChar == 42) {
                                jjCheckNAdd(54);
                            } else if (curChar == 63)
                                jjstateSet[jjnewStateCnt++] = 48;
                            break;
                        case 84:
                        case 61:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                        {
                            jjCheckNAdd(61);
                        }
                        break;
                        case 5:
                            if ((0x3fe000000000000L & l) == 0x0L)
                                break;
                            if (kind > 38)
                                kind = 38;
                        {
                            jjCheckNAdd(6);
                        }
                        break;
                        case 6:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 38)
                                kind = 38;
                        {
                            jjCheckNAdd(6);
                        }
                        break;
                        case 7:
                            if (curChar == 46) {
                                jjCheckNAdd(8);
                            }
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                        {
                            jjCheckNAddStates(16, 18);
                        }
                        break;
                        case 10:
                            if ((0x280000000000L & l) != 0x0L) {
                                jjCheckNAdd(11);
                            }
                            break;
                        case 11:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                        {
                            jjCheckNAddTwoStates(11, 12);
                        }
                        break;
                        case 13:
                            if (curChar == 34) {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        case 15: {
                            jjCheckNAddStates(13, 15);
                        }
                        break;
                        case 16:
                            if ((0xfffffffbffffffffL & l) != 0x0L) {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        case 17:
                            if (curChar == 34 && kind > 41)
                                kind = 41;
                            break;
                        case 18:
                            if (curChar == 39) {
                                jjCheckNAddStates(10, 12);
                            }
                            break;
                        case 20: {
                            jjCheckNAddStates(10, 12);
                        }
                        break;
                        case 21:
                            if ((0xffffff7bffffffffL & l) != 0x0L) {
                                jjCheckNAddStates(10, 12);
                            }
                            break;
                        case 22:
                            if (curChar == 39 && kind > 42)
                                kind = 42;
                            break;
                        case 23:
                            if (curChar == 37)
                                jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 28:
                            if ((0x3fe000000000000L & l) == 0x0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                        {
                            jjCheckNAdd(29);
                        }
                        break;
                        case 29:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                        {
                            jjCheckNAdd(29);
                        }
                        break;
                        case 31:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                            jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 36:
                            if (curChar == 44) {
                                jjAddStates(22, 23);
                            }
                            break;
                        case 37:
                            if (curChar == 63)
                                jjstateSet[jjnewStateCnt++] = 38;
                            break;
                        case 39:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(24, 26);
                            }
                            break;
                        case 42:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(27, 29);
                            }
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(30, 32);
                            }
                            break;
                        case 45:
                            if (curChar == 42) {
                                jjCheckNAdd(40);
                            }
                            break;
                        case 46:
                            if (curChar == 60) {
                                jjAddStates(7, 9);
                            }
                            break;
                        case 49:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(33, 35);
                            }
                            break;
                        case 50:
                            if (curChar == 44) {
                                jjAddStates(36, 37);
                            }
                            break;
                        case 51:
                            if (curChar == 63)
                                jjstateSet[jjnewStateCnt++] = 52;
                            break;
                        case 53:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(38, 40);
                            }
                            break;
                        case 54:
                            if (curChar == 62 && kind > 46)
                                kind = 46;
                            break;
                        case 56:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(41, 43);
                            }
                            break;
                        case 58:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(44, 46);
                            }
                            break;
                        case 59:
                            if (curChar == 42) {
                                jjCheckNAdd(54);
                            }
                            break;
                        case 62:
                            if (curChar == 63)
                                jjstateSet[jjnewStateCnt++] = 63;
                            break;
                        case 64:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjstateSet[jjnewStateCnt++] = 64;
                            break;
                        case 65:
                            if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 66;
                            break;
                        case 67:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjstateSet[jjnewStateCnt++] = 67;
                            break;
                        case 68:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(0, 6);
                            }
                            break;
                        case 69:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddTwoStates(69, 70);
                            }
                            break;
                        case 70:
                            if (curChar != 46)
                                break;
                            if (kind > 39)
                                kind = 39;
                        {
                            jjCheckNAddStates(47, 49);
                        }
                        break;
                        case 71:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                        {
                            jjCheckNAddStates(47, 49);
                        }
                        break;
                        case 73:
                            if ((0x280000000000L & l) != 0x0L) {
                                jjCheckNAdd(74);
                            }
                            break;
                        case 74:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                        {
                            jjCheckNAddTwoStates(74, 12);
                        }
                        break;
                        case 75:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddTwoStates(75, 76);
                            }
                            break;
                        case 77:
                            if ((0x280000000000L & l) != 0x0L) {
                                jjCheckNAdd(78);
                            }
                            break;
                        case 78:
                            if ((0x3ff000000000000L & l) == 0x0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                        {
                            jjCheckNAddTwoStates(78, 12);
                        }
                        break;
                        case 79:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddStates(50, 52);
                            }
                            break;
                        case 81:
                            if ((0x280000000000L & l) != 0x0L) {
                                jjCheckNAdd(82);
                            }
                            break;
                        case 82:
                            if ((0x3ff000000000000L & l) != 0x0L) {
                                jjCheckNAddTwoStates(82, 12);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 33:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(30, 32);
                            }
                            break;
                        case 1:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                if (kind > 49)
                                    kind = 49;
                                {
                                    jjCheckNAdd(61);
                                }
                            } else if (curChar == 123) {
                                jjAddStates(53, 55);
                            } else if (curChar == 64) {
                                jjAddStates(56, 58);
                            }
                            if (curChar == 76) {
                                jjCheckNAdd(2);
                            } else if (curChar == 71) {
                                jjCheckNAdd(2);
                            } else if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 27:
                            if ((0x7fffffe07fffffeL & l) == 0x0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                        {
                            jjCheckNAdd(31);
                        }
                        break;
                        case 85:
                            if ((0xffffffffefffffffL & l) != 0x0L) {
                                jjCheckNAddStates(10, 12);
                            } else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 83:
                            if ((0xffffffffefffffffL & l) != 0x0L) {
                                jjCheckNAddStates(13, 15);
                            } else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 47:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(44, 46);
                            }
                            break;
                        case 84:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                if (kind > 49)
                                    kind = 49;
                                {
                                    jjCheckNAdd(61);
                                }
                            }
                            if (curChar == 84) {
                                if (kind > 37)
                                    kind = 37;
                            }
                            break;
                        case 0:
                            if (curChar == 81 && kind > 37)
                                kind = 37;
                            break;
                        case 2:
                            if (curChar == 84 && kind > 37)
                                kind = 37;
                            break;
                        case 3:
                            if (curChar == 71) {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 4:
                            if (curChar == 76) {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 9:
                            if ((0x2000000020L & l) != 0x0L) {
                                jjAddStates(59, 60);
                            }
                            break;
                        case 12:
                            if ((0x5000000050L & l) != 0x0L && kind > 39)
                                kind = 39;
                            break;
                        case 14:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 15: {
                            jjCheckNAddStates(13, 15);
                        }
                        break;
                        case 16:
                            if ((0xffffffffefffffffL & l) != 0x0L) {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        case 19:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 20:
                            if ((0xfffbbfffffffffffL & l) != 0x0L) {
                                jjCheckNAddStates(10, 12);
                            }
                            break;
                        case 21:
                            if ((0xffffffffefffffffL & l) != 0x0L) {
                                jjCheckNAddStates(10, 12);
                            }
                            break;
                        case 24:
                            if ((0x7fffffe07fffffeL & l) == 0x0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                        {
                            jjCheckNAdd(25);
                        }
                        break;
                        case 25:
                            if ((0x7fffffe87fffffeL & l) == 0x0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                        {
                            jjCheckNAdd(25);
                        }
                        break;
                        case 26:
                            if (curChar == 64) {
                                jjAddStates(56, 58);
                            }
                            break;
                        case 31:
                            if ((0x7fffffe87fffffeL & l) == 0x0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                        {
                            jjCheckNAdd(31);
                        }
                        break;
                        case 32:
                            if (curChar == 123) {
                                jjAddStates(53, 55);
                            }
                            break;
                        case 34:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 35:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(19, 21);
                            }
                            break;
                        case 38:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(24, 26);
                            }
                            break;
                        case 39:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(24, 26);
                            }
                            break;
                        case 40:
                            if (curChar == 125 && kind > 46)
                                kind = 46;
                            break;
                        case 41:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(27, 29);
                            }
                            break;
                        case 42:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(27, 29);
                            }
                            break;
                        case 44:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(30, 32);
                            }
                            break;
                        case 48:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(33, 35);
                            }
                            break;
                        case 49:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(33, 35);
                            }
                            break;
                        case 52:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(38, 40);
                            }
                            break;
                        case 53:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(38, 40);
                            }
                            break;
                        case 55:
                            if ((0x7fffffe07fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(41, 43);
                            }
                            break;
                        case 56:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(41, 43);
                            }
                            break;
                        case 58:
                            if ((0x7fffffe87fffffeL & l) != 0x0L) {
                                jjCheckNAddStates(44, 46);
                            }
                            break;
                        case 60:
                            if ((0x7fffffe07fffffeL & l) == 0x0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                        {
                            jjCheckNAdd(61);
                        }
                        break;
                        case 61:
                            if ((0x7fffffe87fffffeL & l) == 0x0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                        {
                            jjCheckNAdd(61);
                        }
                        break;
                        case 63:
                            if ((0x7fffffe07fffffeL & l) == 0x0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                        {
                            jjCheckNAdd(64);
                        }
                        break;
                        case 64:
                            if ((0x7fffffe87fffffeL & l) == 0x0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                        {
                            jjCheckNAdd(64);
                        }
                        break;
                        case 66:
                            if ((0x7fffffe07fffffeL & l) == 0x0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                        {
                            jjCheckNAdd(67);
                        }
                        break;
                        case 67:
                            if ((0x7fffffe87fffffeL & l) == 0x0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                        {
                            jjCheckNAdd(67);
                        }
                        break;
                        case 72:
                            if ((0x2000000020L & l) != 0x0L) {
                                jjAddStates(61, 62);
                            }
                            break;
                        case 76:
                            if ((0x2000000020L & l) != 0x0L) {
                                jjAddStates(63, 64);
                            }
                            break;
                        case 80:
                            if ((0x2000000020L & l) != 0x0L) {
                                jjAddStates(65, 66);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 85:
                        case 21:
                        case 20:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjCheckNAddStates(10, 12);
                            }
                            break;
                        case 83:
                        case 16:
                        case 15:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjCheckNAddStates(13, 15);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            i = jjnewStateCnt;
            jjnewStateCnt = startsAt;
            startsAt = 83 - jjnewStateCnt;
            if (i == startsAt)
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case '*':
                return jjMoveStringLiteralDfa1_1(0x80L);
            default:
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case '/':
                if ((active0 & 0x80L) != 0x0L)
                    return jjStopAtPos(1, 7);
                break;
            default:
                return 2;
        }
        return 2;
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, null, null, null, "\173", "\175", "\50", "\51",
            "\133", "\135", "\72", "\77", "\52", "\54", "\46", "\100", "\43", "\45", "\74", "\76",
            "\75", "\174", "\42", "\47", "\137", "\176",
            "\124\171\160\145\110\151\145\162\141\162\143\150\171", "\122\145\154\141\164\151\157\156\110\151\145\162\141\162\143\150\171",
            "\124\171\160\145\114\141\142\145\154", "\122\145\154\141\164\151\157\156\114\141\142\145\154",
            "\114\141\155\142\144\141\105\170\160\162\145\163\163\151\157\156", "\104\145\146", "\154\141\155\142\144\141", null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null,};

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = im == null ? input_stream.getImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        t.image = curTokenImage;

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static final int[] jjnextStates = {
            69, 70, 75, 76, 79, 80, 12, 47, 57, 59, 19, 21, 22, 14, 16, 17,
            8, 9, 12, 35, 36, 40, 37, 41, 36, 39, 40, 36, 42, 40, 44, 36,
            40, 49, 50, 54, 51, 55, 50, 53, 54, 50, 56, 54, 58, 50, 54, 71,
            72, 12, 79, 80, 12, 33, 43, 45, 27, 28, 30, 10, 11, 73, 74, 77,
            78, 81, 82,
    };

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.beginToken();
            } catch (final Exception e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            for (; ; ) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0x0L)
                                curChar = input_stream.beginToken();
                        } catch (final java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 6) {
                            jjmatchedKind = 6;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null)
                                specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else
                            SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    jjimageLen += jjmatchedPos + 1;
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (final java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (final java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.getImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.getImage();
                }
                throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /**
     * Constructor.
     */
    public CgifParserTokenManager(SimpleCharStream stream) {
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public CgifParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */

    public void ReInit(SimpleCharStream stream) {


        jjmatchedPos =
                jjnewStateCnt =
                        0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 83; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }


    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
            "IN_MULTI_LINE_COMMENT",
    };

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
            -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1,
    };
    static final long[] jjtoToken = {
            0xe5effffffff01L,
    };
    static final long[] jjtoSkip = {
            0x9eL,
    };
    static final long[] jjtoSpecial = {
            0x80L,
    };
    static final long[] jjtoMore = {
            0x60L,
    };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[83];
    private final int[] jjstateSet = new int[2 * 83];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
