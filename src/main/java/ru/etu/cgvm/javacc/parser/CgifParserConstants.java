/* Generated by: ParserGeneratorCC: Do not edit this line. CgifParserConstants.java */
package ru.etu.cgvm.javacc.parser;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface CgifParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int LBRACE = 8;
    /**
     * RegularExpression Id.
     */
    int RBRACE = 9;
    /**
     * RegularExpression Id.
     */
    int LPAREN = 10;
    /**
     * RegularExpression Id.
     */
    int RPAREN = 11;
    /**
     * RegularExpression Id.
     */
    int LBRACKET = 12;
    /**
     * RegularExpression Id.
     */
    int RBRACKET = 13;
    /**
     * RegularExpression Id.
     */
    int COLON = 14;
    /**
     * RegularExpression Id.
     */
    int QUESTIONMARK = 15;
    /**
     * RegularExpression Id.
     */
    int STAR = 16;
    /**
     * RegularExpression Id.
     */
    int COMMA = 17;
    /**
     * RegularExpression Id.
     */
    int AMP = 18;
    /**
     * RegularExpression Id.
     */
    int ATSIGN = 19;
    /**
     * RegularExpression Id.
     */
    int POUNDSIGN = 20;
    /**
     * RegularExpression Id.
     */
    int PERCENTSIGN = 21;
    /**
     * RegularExpression Id.
     */
    int LESSTHAN = 22;
    /**
     * RegularExpression Id.
     */
    int GREATERTHAN = 23;
    /**
     * RegularExpression Id.
     */
    int EQUAL = 24;
    /**
     * RegularExpression Id.
     */
    int BAR = 25;
    /**
     * RegularExpression Id.
     */
    int DOUBLEQUOTE = 26;
    /**
     * RegularExpression Id.
     */
    int SINGLEQUOTE = 27;
    /**
     * RegularExpression Id.
     */
    int UNDERSCORE = 28;
    /**
     * RegularExpression Id.
     */
    int TILDE = 29;
    /**
     * RegularExpression Id.
     */
    int TYPEHIERARCHY = 30;
    /**
     * RegularExpression Id.
     */
    int RELATIONHIERARCHY = 31;
    /**
     * RegularExpression Id.
     */
    int TYPELABEL = 32;
    /**
     * RegularExpression Id.
     */
    int RELATIONLABEL = 33;
    /**
     * RegularExpression Id.
     */
    int LAMBDAEXPRESSION = 34;
    /**
     * RegularExpression Id.
     */
    int DEF = 35;
    /**
     * RegularExpression Id.
     */
    int LAMBDA = 36;
    /**
     * RegularExpression Id.
     */
    int ORDER = 37;
    /**
     * RegularExpression Id.
     */
    int DECIMAL_LITERAL = 38;
    /**
     * RegularExpression Id.
     */
    int FLOATING_POINT_LITERAL = 39;
    /**
     * RegularExpression Id.
     */
    int EXPONENT = 40;
    /**
     * RegularExpression Id.
     */
    int QUOTED_STRING = 41;
    /**
     * RegularExpression Id.
     */
    int CHARACTER_LITERAL = 42;
    /**
     * RegularExpression Id.
     */
    int ADDITIONAL_INFO = 43;
    /**
     * RegularExpression Id.
     */
    int QUANTIFIER = 44;
    /**
     * RegularExpression Id.
     */
    int SET_ELEMENTS = 45;
    /**
     * RegularExpression Id.
     */
    int STRUCTURE = 46;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 47;
    /**
     * RegularExpression Id.
     */
    int LETTER = 48;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 49;
    /**
     * RegularExpression Id.
     */
    int RELATED_MARK = 50;
    /**
     * RegularExpression Id.
     */
    int DEFINING_MARK = 51;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;
    /**
     * Lexical state.
     */
    int IN_MULTI_LINE_COMMENT = 1;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "\"/*\"",
            "<token of kind 6>",
            "\"*/\"",
            "\"{\"",
            "\"}\"",
            "\"(\"",
            "\")\"",
            "\"[\"",
            "\"]\"",
            "\":\"",
            "\"?\"",
            "\"*\"",
            "\",\"",
            "\"&\"",
            "\"@\"",
            "\"#\"",
            "\"%\"",
            "\"<\"",
            "\">\"",
            "\"=\"",
            "\"|\"",
            "\"\\\"\"",
            "\"\\\'\"",
            "\"_\"",
            "\"~\"",
            "\"TypeHierarchy\"",
            "\"RelationHierarchy\"",
            "\"TypeLabel\"",
            "\"RelationLabel\"",
            "\"LambdaExpression\"",
            "\"Def\"",
            "\"lambda\"",
            "<ORDER>",
            "<DECIMAL_LITERAL>",
            "<FLOATING_POINT_LITERAL>",
            "<EXPONENT>",
            "<QUOTED_STRING>",
            "<CHARACTER_LITERAL>",
            "<ADDITIONAL_INFO>",
            "<QUANTIFIER>",
            "<SET_ELEMENTS>",
            "<STRUCTURE>",
            "<DIGIT>",
            "<LETTER>",
            "<IDENTIFIER>",
            "<RELATED_MARK>",
            "<DEFINING_MARK>",
    };

}
